name: 'action-rl-scanner'
author: 'Maarten Boot'
description: 'Apply reversinglabs/rl-scanner and upload report, show and return status'

branding:
  icon: 'check'
  color: 'green'

inputs:
  artifact-to-scan:  # id of input
    description: 'The file artifact we will be scanning (a file path relative to the workspace)'
    required: true

outputs:
  descripion:
    description: 'The result of the action: a string terminanting in FAIL or PASS'
    # value: ${{ steps.random-number-generator.outputs.random-number }}
  status:
    description: 'The single word result of the action: success, failure or error'
    # value: ${{ steps.random-number-generator.outputs.random-number }}

runs:
  using: "composite"
  steps:
    # -------------------------------------------
    - name: show the input
      shell: bash
      run: |
        # -----------------------------
        # verbose and feedback during test
        ls -l
        ls -l dist
        chmod +r ${{ inputs.artifact-to-scan }}
        ls -l ${{ inputs.artifact-to-scan }}
    - name: show the input
      shell: bash
      run: |
        # ----------------------------
        prepare()
        {
          xFile=$( basename ${{ inputs.artifact-to-scan }} )
          xDir=$( dirname ${{ inputs.artifact-to-scan }} )
          xDir=$( realpath $xDir )
          rm -rf MyReportDir && mkdir MyReportDir
          xReport=$( realpath MyReportDir )
        }
        # ---------------------------
        doScan()
        {
          set +e # temporary supress error on command we will do that ourselves here
          docker run --rm \
          -e RLSECURE_ENCODED_LICENSE -e RLSECURE_SITE_KEY \
          -v ${xReport}:/report -v ${xDir}:/packages:ro \
          reversinglabs/rl-scanner \
          rl-scan \
            --package-path=/packages/${xFile} \
            --report-path=/report \
            --report-format=all 2>2 1>1
          RR=$?
          set -e
          cat 1
          STATUS=$( grep 'Scan result:' 1 )
        }
        # ---------------------------
        statusError()
        {
          [ -z "$STATUS" ] && {
            cat 2
            msg="Fatal: cannot find the Scan result in the output"
            echo "::error::$msg"
            echo "description=$msg" >>$GITHUB_OUTPUT
            echo "status=error" >>$GITHUB_OUTPUT
            exit 101
          }
        }
        # ---------------------------
        statusPassFail()
        {
          echo "description=$STATUS" >>$GITHUB_OUTPUT
          if [ echo "$STATUS" | grep -q FAIL ]
          then
            echo "status=error" >>$GITHUB_OUTPUT
          else
            echo "status=success" >>$GITHUB_OUTPUT
          fi
          ls -l ${xReport}
        }
        # ---------------------------
        main()
        {
          prepare
          doScan
          statusError
          statusPassFail
          exit ${RR}
        }
        main

